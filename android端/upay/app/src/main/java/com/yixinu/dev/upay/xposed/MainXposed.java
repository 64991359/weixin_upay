package com.yixinu.dev.upay.xposed;  import android.app.Activity;  import android.content.BroadcastReceiver;  import android.content.ContentValues;  import android.content.Context;  import android.content.Intent;  import android.content.IntentFilter;  import android.content.SharedPreferences;  import android.os.Bundle;  import android.os.Handler;  import android.util.Log;  import org.json.JSONException;  import org.json.JSONObject;  import java.io.BufferedReader;  import java.io.BufferedWriter;  import java.io.IOException;  import java.io.InputStreamReader;  import java.io.OutputStreamWriter;  import java.io.PrintWriter;  import java.io.UnsupportedEncodingException;  import java.lang.reflect.Field;  import java.net.Socket;  import java.net.SocketException;  import java.net.SocketTimeoutException;  import java.net.UnknownHostException;  import de.robv.android.xposed.IXposedHookLoadPackage;  import de.robv.android.xposed.XC_MethodHook;  import de.robv.android.xposed.XposedHelpers;  import de.robv.android.xposed.callbacks.XC_LoadPackage;  import static de.robv.android.xposed.XposedBridge.log;  import static de.robv.android.xposed.XposedHelpers.findAndHookMethod;  import static de.robv.android.xposed.XposedHelpers.findClass;  public final class MainXposed implements IXposedHookLoadPackage { static public ClassLoader thisClassLoader;  protected String wxid = "";  protected String wx_nick_name = "";  protected String wx_user_name = "";  protected String wx_user_uin = "";  protected String money = "2";  protected String mark = "1002";  protected  String appkey = "";  public Object WalletOfflineCoinPurseUI=null;  public Object CollectMainUI=null;  public Intent CollectMainUI_Intent;  public int jumpstatus=0;  public int login = 0;  public String processName = null;  public Context mContext = null;  broadcast b;  @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable { processName = lpparam.processName;  if (lpparam.processName.equals("com.tencent.mm")){ l = new l_thread();  b = new broadcast();  thisClassLoader = lpparam.classLoader;  log("upay: 开始hook微信进程");  hookCollectQrcode();  } if(lpparam.processName.equals("com.yixinu.dev")){ findAndHookMethod(XposedHelpers.findClass("com.yixinu.dev.upay.MainActivity", lpparam.classLoader), "onCreate", Bundle.class, new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { super.beforeHookedMethod(param);  XposedHelpers.setObjectField(param.thisObject,"WXID",wxid);  XposedHelpers.setObjectField(param.thisObject,"WX_USER_NAME",wx_user_name);  Field field_wxid = param.thisObject.getClass().getDeclaredField("WXID");  field_wxid.set(param.thisObject,wxid);  String WXID = (String)field_wxid.get(param.thisObject);  Field field_wx_user_name = param.thisObject.getClass().getDeclaredField("WX_USER_NAME");  field_wx_user_name.set(param.thisObject,wx_user_name);  String WX_USER_NAME = (String)field_wx_user_name.get(param.thisObject);  } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { super.afterHookedMethod(param);  } });  } } public long l_time = 0;  public long l_time_r = 3 * 1000;  l_thread l = null;  class l_thread extends  Thread{ @Override public void run() { super.run();  while (true) { long t = System.currentTimeMillis() - l_time;  if ( t >= l_time_r ) { l_time = System.currentTimeMillis();  if (socket == null || socket.isClosed()) { login = 1;  connectService();  } } } } } public void run_create_qrcode(String money , String mark){ jumpstatus=1;  Context context = ((Activity) WalletOfflineCoinPurseUI);  Intent intent = new Intent(context,findClass("com.tencent.mm.plugin.collect.ui.CollectCreateQRCodeUI",thisClassLoader));  context.startActivity(intent);  } private void hookCollectQrcode(){ findAndHookMethod(XposedHelpers.findClass("com.tencent.mm.ui.LauncherUI", thisClassLoader), "onCreate", Bundle.class, new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { super.afterHookedMethod(param);  SharedPreferences sharedPreferences = ((Activity) param.thisObject).getSharedPreferences("com.tencent.mm_preferences", 0);  wxid =    sharedPreferences.getString("login_weixin_username", "null");  wx_nick_name =   sharedPreferences.getString("last_login_nick_name", "null");  wx_user_name =   sharedPreferences.getString("login_user_name", "null");  wx_user_name=wx_user_name.replace("+86","");  wx_user_uin =   sharedPreferences.getString("last_login_uin", "null");  new Thread(){ @Override public void run() { super.run();  try { Socket localsocket = new Socket("127.0.0.1",9988);  if(localsocket.isConnected()) { BufferedReader reader2 = new BufferedReader(new InputStreamReader( localsocket.getInputStream(), "UTF-8"));  PrintWriter writer2 = new PrintWriter(new BufferedWriter(new OutputStreamWriter( localsocket.getOutputStream(), "UTF-8")), true);  String jsonstring = "{flag:\"wx\",wxid:\"" + wxid + "\",mobile:\"" + wx_user_name + "\",wx_nick_name:\"" + wx_nick_name + "\",wx_user_uin:\"" + wx_user_uin + "\"}";  JSONObject json = new JSONObject(jsonstring);  writer2.println(json.toString());  writer2.flush();  } } catch (IOException e) { e.printStackTrace();  } catch (JSONException e) { e.printStackTrace();  } } }.start();  l.start();  log("微信ID："+wxid+"，微信昵称："+wx_nick_name+"，微信用户名："+wx_user_name+"，微信UID"+wx_user_uin);  } });  findAndHookMethod("com.tencent.wcdb.database.SQLiteDatabase", thisClassLoader, "insertWithOnConflict", String.class, String.class, ContentValues.class, int.class, new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { ContentValues var3 = (ContentValues)param.args[2];  String var33_ = var3.toString();  final String var33=new String(var33_.getBytes("UTF-8"), "UTF-8");  if(var3.containsKey("source")){ String source = var3.getAsString("source");  if(source.equals("微信支付")){ log("准备取金额");  weixin.http_request(wxid,wx_user_name,var33);  new Handler().postDelayed(new Runnable(){ public void run(){ Intent intent = new Intent();  intent.setAction("broadcast");  intent.putExtra("type","http_request");  intent.putExtra("data",var33);  mContext.sendBroadcast(intent);  } } , 2000L);  new Handler().postDelayed(new Runnable(){ public void run(){ Intent intent = new Intent();  intent.setAction("broadcast");  intent.putExtra("type","http_request");  intent.putExtra("data",var33);  mContext.sendBroadcast(intent);  } } , 4000L);  } } } });  findAndHookMethod("com.tencent.mm.plugin.offline.ui.WalletOfflineCoinPurseUI", thisClassLoader, "onCreate" ,Bundle.class,new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) { WalletOfflineCoinPurseUI = param.thisObject;  } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { if(mContext==null) { Context context = (Context) param.thisObject;  mContext = context;  IntentFilter intentFilter = new IntentFilter();  intentFilter.addAction("broadcast");  context.registerReceiver(b, intentFilter);  log("注册了广播");  new weixin(MainXposed.this).exec(thisClassLoader, context);  } } });  findAndHookMethod("com.tencent.mm.plugin.collect.ui.CollectMainUI", thisClassLoader, "initView", new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { CollectMainUI = param.thisObject;  CollectMainUI_Intent = ((Activity) CollectMainUI).getIntent();  if(jumpstatus==1) { Intent m = new Intent();  m.setClassName("com.tencent.mm","com.tencent.mm.plugin.collect.ui.CollectCreateQRCodeUI");  m.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  ((Activity) CollectMainUI).startActivity(m);  } } });  findAndHookMethod("com.tencent.mm.plugin.collect.ui.CollectMainUI", thisClassLoader, "onActivityResult", int.class , int.class, Intent.class, new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { log("upay: onActivityResult 参数： " + (param.args[0]).toString() + "," + (param.args[1]).toString() + "," + (param.args[2]).toString() );  Intent paramIntent = (Intent) param.args[2];  String iLv = paramIntent.getStringExtra("ftf_pay_url");  Double iLx = paramIntent.getDoubleExtra("ftf_fixed_fee", 0.0D);  String iLy = paramIntent.getStringExtra("ftf_fixed_fee_type");  String iLz = paramIntent.getStringExtra("ftf_fixed_desc");  String iLu = paramIntent.getStringExtra("key_currency_unit");  log("upay: onActivityResult 参数： " + iLv + "," + iLx + "," + iLy+ ","+ iLz+ ","+ iLu);  } });  findAndHookMethod("com.tencent.mm.plugin.collect.ui.CollectCreateQRCodeUI", thisClassLoader, "initView" ,new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) { } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { if(jumpstatus==1) { Class<?> bs = XposedHelpers.findClass("com.tencent.mm.plugin.collect.b.s", thisClassLoader);  Object bsobj = XposedHelpers.newInstance(bs, Double.valueOf(money), "1", mark);  XposedHelpers.callMethod(param.thisObject, "a", bsobj, true, true);  } } });  Class<?> cc = findClass("com.tencent.mm.ai.m",thisClassLoader);  XposedHelpers.findAndHookMethod("com.tencent.mm.plugin.collect.ui.CollectCreateQRCodeUI",thisClassLoader, "c",   int.class,int.class,String.class,cc ,new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { log("类c方法" + param.thisObject.toString());  Field ihy = ((Object)param.args[3]).getClass().getDeclaredField("iHY");  ihy.setAccessible(true);  String url = (String)ihy.get(param.args[3]);  Field ihz = ((Object)param.args[3]).getClass().getDeclaredField("iHZ");  ihz.setAccessible(true);  String fee = (String)ihy.get(param.args[3]);  log("类c方法 url:" + url);  log("类c方法 fee:" + fee);  final String jsonstring = "{flag:\"generate_payment_code\",wxid:\""+wxid+"\",mobile:\""+wx_user_name+"\",data:{qrcode_val:\""+url+"\",qrcode_id:\""+mark+"\"}}";  new Thread(){ @Override public void run() { super.run();  jumpstatus=0;  sendMessage(jsonstring);  } }.start();  new Handler().postDelayed(new Runnable(){ public void run() { Intent intent = new Intent();  intent.setAction("broadcast");  intent.putExtra("type","senddata");  intent.putExtra("jump","true");  intent.putExtra("data",jsonstring);  mContext.sendBroadcast(intent);  log("发送了广播");  } } , 2000L);  } });  XposedHelpers.findAndHookConstructor("com.tencent.mm.plugin.collect.b.s", thisClassLoader, double.class , String.class , String.class, new XC_MethodHook(){ @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { log("upay: 生成了二维码 30:" + param.args[0]);  log("upay: 生成了二维码 31:" + param.args[1]);  log("upay: 生成了二维码 32:" + param.args[2]);  Double _money = (Double) param.args[0];  String _type = (String)param.args[1];  String _desc = (String)param.args[2];  param.args[0] = Double.valueOf(money) ;  param.args[1] = _type;  param.args[2] = mark ;  } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { } });  } class broadcast extends BroadcastReceiver{ @Override public void onReceive(Context context, Intent intent) { String type = intent.getStringExtra("type");  if(type.equals("senddata")){ log("接收了广播");  final String data = intent.getStringExtra("data");  new Thread(){ @Override public void run() { super.run();  sendMessage(data);  } }.start();  String jump = intent.getStringExtra("true");  if(jump.equals("true")) { Intent II = new Intent(context, findClass("com.tencent.mm.plugin.offline.ui.WalletOfflineCoinPurseUI", thisClassLoader));  II.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  mContext.startActivity(intent);  } } else if(type.equals("http_request")){ String data = intent.getStringExtra("data");  weixin.http_request(wxid,wx_user_name ,data);  } } } public Socket socket;  public String HOST = "upay.yixinu.com";      public int PORT = 4188;    public BufferedReader reader;  public PrintWriter writer;  public String workStatus;  public long HEART_BEAT_RATE = 60 * 1000;      public long sendTime = 0L;  receivedata rd;   heartbeat hd;     protected void connectService(){ new Thread(){ @Override public void run() { try { socket = new Socket(HOST,PORT);  if(socket.isConnected()){ log("socket连接成功");  workStatus = "success";  reader = new BufferedReader(new InputStreamReader( socket.getInputStream(), "UTF-8"));  writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter( socket.getOutputStream(), "UTF-8")), true);  String jsonstring = "{flag:\"client\",wxid:\""+wxid+"\",mobile:\""+wx_user_name+"\",wx_nick_name:\""+wx_nick_name+"\",wx_user_uin:\""+wx_user_uin+"\",data:\"connect\"}";  JSONObject json = new JSONObject(jsonstring);  writer.println(json.toString());  writer.flush();  sendTime = System.currentTimeMillis();  rd = new receivedata();  rd.start();  hd = new heartbeat();  hd.start();  } } catch (SocketException ex) { log( "socket 连接失败 ");  ex.printStackTrace();  workStatus = "failure";  return;  } catch (SocketTimeoutException ex) { log( "socket 连接失败 ");  ex.printStackTrace();  workStatus = "failure";  return;  } catch (Exception ex) { log( "socket 连接失败 ");  ex.printStackTrace();  workStatus = "failure";  return;  } } }.start();  } public void getMessage(String content){ try{ log("upay: 接收socket数据："+content);  JSONObject json = new JSONObject(content);  String flag = json.getString("flag");  JSONObject data = json.getJSONObject("data");  money = data.getString("money");  mark = data.getString("qrcode_id");  if(flag.equals("order")) { run_create_qrcode(money, mark);  } } catch (Exception ex) { ex.printStackTrace();  workStatus="failure";  } } protected class heartbeat extends Thread{ @Override public void run() { super.run();  while (true) { long t = System.currentTimeMillis() - sendTime;  if ( t >= HEART_BEAT_RATE) { long time = System.currentTimeMillis() / 1000;  String jsonstring = "{flag:\"heartbeat\",wxid:\""+wxid+"\",\"mobile\":\""+wx_user_name+"\",\"data\":{\"time\": \""+time+"\"} }";  sendMessage(jsonstring);  sendTime = System.currentTimeMillis();  } } } } protected class receivedata extends Thread { @Override public void run() { super.run();  try{ while (true) { if (socket.isConnected()) { if (!socket.isInputShutdown()) { String content;  if ((content = reader.readLine()) != null) { getMessage(content);  } } } } } catch (IOException e) { log("while 异常错误");  e.printStackTrace();  } } } public boolean sendMessage(String jsonstring){ try { JSONObject json = new JSONObject(jsonstring);  return send_data(json);  }catch (JSONException e) { log("json数据格式解析失败");  e.printStackTrace();  } return false;  } public boolean send_data(JSONObject json){ if (socket == null || socket.isClosed()) { try{ socket = new Socket(HOST,PORT);  log("socket连接成功");  workStatus = "success";  reader = new BufferedReader(new InputStreamReader( socket.getInputStream(), "UTF-8"));  writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter( socket.getOutputStream(), "UTF-8")), true);  } catch (UnknownHostException e) { e.printStackTrace();  } catch (UnsupportedEncodingException e) { e.printStackTrace();  } catch (IOException e) { e.printStackTrace();  } } if(socket.isClosed() || socket.isClosed()){ try{ socket = new Socket(HOST,PORT);  log("socket连接成功");  workStatus = "success";  reader = new BufferedReader(new InputStreamReader( socket.getInputStream(), "UTF-8"));  writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter( socket.getOutputStream(), "UTF-8")), true);  } catch (UnknownHostException e) { e.printStackTrace();  } catch (UnsupportedEncodingException e) { e.printStackTrace();  } catch (IOException e) { e.printStackTrace();  } } if(socket.isClosed()){ return false;  } if (!socket.isOutputShutdown()) { try { log("发送socket数据："+json.toString());  workStatus = "success";  writer.println(json.toString());  writer.flush();  sendTime = System.currentTimeMillis();  log("数据发送完成：" + json.toString());  return true;  } catch (Exception e) { log("发送数据失败：" + e.toString());  e.printStackTrace();  workStatus = "failure";  } } else { Log.i("upay:", "发送数据时发现socket输入输出流已经关闭");  workStatus = "failure";  } return false;  } } 